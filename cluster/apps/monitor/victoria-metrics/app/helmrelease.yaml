apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vm
  namespace: monitor
spec:
  interval: 15m
  chart:
    spec:
      chart: victoria-metrics-k8s-stack
      version: 0.19.4
      sourceRef:
        kind: HelmRepository
        name: victoriametrics
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    victoria-metrics-operator:
      nameOverride: operator
      env:
        - name: VM_VMSINGLEDEFAULT_CONFIGRELOADERCPU
          value: 100m
        - name: VM_VMSINGLEDEFAULT_CONFIGRELOADERMEMORY
          value: 100Mi
        - name: VM_VMALERTDEFAULT_CONFIGRELOADERCPU
          value: 100m
        - name: VM_VMALERTDEFAULT_CONFIGRELOADERMEMORY
          value: 100Mi
        - name: VM_VMAGENTDEFAULT_CONFIGRELOADERCPU
          value: 100m
        - name: VM_VMAGENTDEFAULT_CONFIGRELOADERMEMORY
          value: 100Mi
        - name: VM_VMALERTMANAGER_CONFIGRELOADERCPU
          value: 100m
        - name: VM_VMALERTMANAGER_CONFIGRELOADERMEMORY
          value: 100Mi
      resources:
        requests:
          cpu: 20m
          memory: 100Mi
          ephemeral-storage: 1Gi
        limits:
          memory: 100Mi
          ephemeral-storage: 2Gi
      operator:
        disable_prometheus_converter: false
    fullnameOverride: vm
    grafana:
      enabled: false
    coreDns:
      spec:
        jobLabel: "jobLabel"
    kubeControllerManager:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeScheduler:
      enabled: false
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      resources:
        requests:
          cpu: 10m
          memory: 100Mi
          ephemeral-storage: 1Gi
        limits:
          memory: 100Mi
          ephemeral-storage: 2Gi
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      image:
        pullPolicy: Always
      resources:
        requests:
          cpu: 10m
          memory: 100Mi
          ephemeral-storage: 1Gi
        limits:
          memory: 200Mi
          ephemeral-storage: 2Gi
    vmsingle:
      spec:
        image:
          pullPolicy: Always
        resources:
          requests:
            cpu: 400m
            memory: 1.2G
            ephemeral-storage: 1Gi
          limits:
            cpu: null
            memory: 1.5G
            ephemeral-storage: 2Gi
        scrape:
          config:
            scrape_configs:
              - job_name: 'kubernetes-service-endpoints'
                honor_labels: true
                kubernetes_sd_configs:
                  - role: endpoints
                relabel_configs:
                  - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape ]
                    action: keep
                    regex: true
                  - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape_slow ]
                    action: drop
                    regex: true
                  - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scheme ]
                    action: replace
                    target_label: __scheme__
                    regex: (https?)
                  - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_path ]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [ __address__, __meta_kubernetes_service_annotation_prometheus_io_port ]
                    action: replace
                    target_label: __address__
                    regex: (.+?)(?::\d+)?;(\d+)
                    replacement: $1:$2
                  - action: labelmap
                    regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                    replacement: __param_$1
                  - action: labelmap
                    regex: __meta_kubernetes_service_label_(.+)
                  - source_labels: [ __meta_kubernetes_namespace ]
                    action: replace
                    target_label: namespace
                  - source_labels: [ __meta_kubernetes_service_name ]
                    action: replace
                    target_label: service
                  - source_labels: [ __meta_kubernetes_pod_node_name ]
                    action: replace
                    target_label: node
              - job_name: 'kubernetes-service-endpoints-slow'
                honor_labels: true
                scrape_interval: 5m
                scrape_timeout: 30s
                kubernetes_sd_configs:
                  - role: endpoints
                relabel_configs:
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                    action: replace
                    target_label: __scheme__
                    regex: (https?)
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                    action: replace
                    target_label: __address__
                    regex: (.+?)(?::\d+)?;(\d+)
                    replacement: $1:$2
                  - action: labelmap
                    regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                    replacement: __param_$1
                  - action: labelmap
                    regex: __meta_kubernetes_service_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: namespace
                  - source_labels: [__meta_kubernetes_service_name]
                    action: replace
                    target_label: service
                  - source_labels: [__meta_kubernetes_pod_node_name]
                    action: replace
                    target_label: node
              - job_name: 'prometheus-pushgateway'
                honor_labels: true
                kubernetes_sd_configs:
                  - role: service
                relabel_configs:
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                    action: keep
                    regex: pushgateway
              - job_name: 'kubernetes-services'
                honor_labels: true
                metrics_path: /probe
                params:
                  module: [http_2xx]
                kubernetes_sd_configs:
                  - role: service
                relabel_configs:
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                    action: keep
                    regex: true
                  - source_labels: [__address__]
                    target_label: __param_target
                  - target_label: __address__
                    replacement: blackbox
                  - source_labels: [__param_target]
                    target_label: instance
                  - action: labelmap
                    regex: __meta_kubernetes_service_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    target_label: namespace
                  - source_labels: [__meta_kubernetes_service_name]
                    target_label: service
              - job_name: 'coroot-node-agent'
                honor_labels: true
                kubernetes_sd_configs:
                  - role: pod
                relabel_configs:
                  - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
                    action: keep
                    regex: true
                  - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow ]
                    action: drop
                    regex: true
                  - source_labels: [ __meta_kubernetes_pod_label_app]
                    action: keep
                    regex: coroot-node-agent
                  - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scheme ]
                    action: replace
                    regex: (https?)
                    target_label: __scheme__
                  - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
                    action: replace
                    regex: (.+?)(?::\d+)?;(\d+)
                    replacement: $1:$2
                    target_label: __address__
                  - source_labels: [ __meta_kubernetes_pod_phase ]
                    regex: Pending|Succeeded|Failed|Completed
                    action: drop
                  - source_labels: [__meta_kubernetes_pod_node_name]
                    target_label: instance
                    action: replace
              - job_name: 'kubernetes-pods'
                honor_labels: true
                kubernetes_sd_configs:
                  - role: pod
                relabel_configs:
                  - source_labels: [ __meta_kubernetes_pod_label_app ]
                    action: drop
                    regex: coroot-node-agent
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
                    action: drop
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                    action: replace
                    regex: (https?)
                    target_label: __scheme__
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                    action: replace
                    regex: (.+?)(?::\d+)?;(\d+)
                    replacement: $1:$2
                    target_label: __address__
                  - action: labelmap
                    regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                    replacement: __param_$1
                  - action: labelmap
                    regex: __meta_kubernetes_pod_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: namespace
                  - source_labels: [__meta_kubernetes_pod_name]
                    action: replace
                    target_label: pod
                  - source_labels: [__meta_kubernetes_pod_phase]
                    regex: Pending|Succeeded|Failed|Completed
                    action: drop
              - job_name: 'kubernetes-pods-slow'
                honor_labels: true
                scrape_interval: 5m
                scrape_timeout: 30s
                kubernetes_sd_configs:
                  - role: pod
                relabel_configs:
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                    action: replace
                    regex: (https?)
                    target_label: __scheme__
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                    action: replace
                    regex: (.+?)(?::\d+)?;(\d+)
                    replacement: $1:$2
                    target_label: __address__
                  - action: labelmap
                    regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                    replacement: __param_$1
                  - action: labelmap
                    regex: __meta_kubernetes_pod_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: namespace
                  - source_labels: [__meta_kubernetes_pod_name]
                    action: replace
                    target_label: pod
                  - source_labels: [__meta_kubernetes_pod_phase]
                    regex: Pending|Succeeded|Failed|Completed
                    action: drop
              - job_name: 'kubernetes-fargate-cadvisor'
                scheme: https
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
                bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                kubernetes_sd_configs:
                  - role: node
                relabel_configs:
                  - action: labelmap
                    regex: __meta_kubernetes_node_label_(.+)
                  - target_label: __address__
                    replacement: kubernetes.default.svc:443
                  - source_labels: [ __meta_kubernetes_node_name ]
                    action: keep
                    regex: (fargate-.+)
                  - source_labels: [ __meta_kubernetes_node_name ]
                    regex: (.+)
                    target_label: __metrics_path__
                    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor              
        
    vmalert:
      spec:
        image:
          pullPolicy: Always
        resources:
          requests:
            cpu: 50m
            memory: 100Mi
            ephemeral-storage: 1Gi
          limits:
            memory: 100Mi
            ephemeral-storage: 2Gi
    vmagent:
      spec:
        image:
          pullPolicy: Always
        externalLabels:
          cluster: lab
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
            ephemeral-storage: 1Gi
          limits:
            memory: 300Mi
            ephemeral-storage: 2Gi
      ingress:
        ingressClassName: private
        enabled: true
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Infrastructure
          gethomepage.dev/name: VM Agent
          gethomepage.dev/icon: si-victoriametrics
          cert-manager.io/cluster-issuer: "letsencrypt-production"
        hosts:
          - &host agent.${SECRET_DOMAIN}
        tls: [hosts: [*host]]
    alertmanager:
      spec:
        image:
          pullPolicy: Always
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
            ephemeral-storage: 1Gi
          limits:
            cpu: null
            memory: 150Mi
            ephemeral-storage: 2Gi
      config:
        global:
          resolve_timeout: 5m
        route:
          group_by: ["alertname", "job"]
          group_wait: 1m
          group_interval: 10m
          repeat_interval: 12h
          receiver: "telegram"
          routes:
            - receiver: "telegram"
        receivers:
          - name: "telegram"
            telegram_configs:
              - parse_mode: "HTML"
                disable_notifications: false
                bot_token: ${TELEGRAM_TOKEN}
                chat_id: ${TELEGRAM_CHATID}
                send_resolved: true
                api_url: https://api.telegram.org         
      ingress:
        ingressClassName: private
        enabled: true
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Infrastructure
          gethomepage.dev/name: VM AlertManager
          gethomepage.dev/icon: si-victoriametrics
          cert-manager.io/cluster-issuer: "letsencrypt-production"
        hosts:
          - &host am.${SECRET_DOMAIN}
        tls: [hosts: [*host]]
