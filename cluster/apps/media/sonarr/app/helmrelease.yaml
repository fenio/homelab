---
# yaml-language-server: $schema=https://raw.githubusercontent.com/ishioni/CRDs-catalog/main/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: sonarr
  namespace: media
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 2.5.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  dependsOn:
    - name: cloudnative-pg
      namespace: database
    - name: ingress-nginx
      namespace: network
    - name: nfs
      namespace: storage
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      main:
        type: statefulset
        statefulset:
          volumeClaimTemplates:
            - name: config
              mountPath: /config
              storageClass: nfs
              accessMode: ReadWriteOnce
              size: 5Gi
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16.1
              pullPolicy: Always
            env:
              INIT_POSTGRES_HOST: &dbHost "postgres-rw.database.svc.cluster.local"
              INIT_POSTGRES_SUPER_PASS: "${SECRET_PG_PASSWORD}"
              INIT_POSTGRES_USER: &dbUser "sonarr"
              INIT_POSTGRES_PASS: &dbPass "${SONARR_PG_PASSWORD}"
              INIT_POSTGRES_DBNAME: sonarr_main sonarr_log
            securityContext:
              allowPrivilegeEscalation: false
              capabilities: {drop: ["ALL"]}
            resources:
              requests:
                cpu: 50m
                memory: 100Mi
                ephemeral-storage: 1Gi
              limits:
                memory: 300Mi
                ephemeral-storage: 5Gi
        containers:
          main:
            image:
              repository: ghcr.io/onedr0p/sonarr
              tag: 4.0.0.748
              pullPolicy: Always
            env:
              TZ: Europe/Warsaw
              SONARR__INSTANCE_NAME: Sonarr
              SONARR__PORT: &port 8989
              SONARR__AUTHENTICATION_METHOD: External
              SONARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              SONARR__LOG_LEVEL: trace
              SONARR__THEME: dark
              SONARR__API_KEY: &API_KEY "${SONARR_API_KEY}"
              SONARR__POSTGRES_HOST: *dbHost
              SONARR__POSTGRES_PORT: "5432"
              SONARR__POSTGRES_USER: *dbUser
              SONARR__POSTGRES_PASSWORD: *dbPass
              SONARR__POSTGRES_MAIN_DB: sonarr_main
              SONARR__POSTGRES_LOG_DB: sonarr_log
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 20
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            securityContext:
              allowPrivilegeEscalation: false
              capabilities: {drop: ["ALL"]}
            resources:
              requests:
                cpu: 100m
                memory: 200Mi
                ephemeral-storage: 1Gi
              limits:
                memory: 250Mi
                ephemeral-storage: 5Gi
    service:
      main:
        ports:
          http:
            port: 80
            targetPort: *port
    persistence:
      media:
        enabled: true
        existingClaim: media
        globalMounts:
          - path: /media
            retain: true
    ingress:
      main:
        annotations:
          kubernetes.io/ingress.class: "nginx"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Media
          gethomepage.dev/name: Sonarr
          gethomepage.dev/icon: sonarr.svg
          gethomepage.dev/widget.type: sonarr
          gethomepage.dev/widget.url: http://sonarr.media
          gethomepage.dev/widget.key: *API_KEY
        enabled: true
        hosts:
          - host: &host "tv.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
        tls:
          - secretName: *host
            hosts:
              - *host
